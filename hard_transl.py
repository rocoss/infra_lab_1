# –§–∞–π–ª: translate_files.py
import pandas as pd
import os
import requests
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# 1. –ü–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∞—Ç –æ—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 1
input_dir = 'cleaned_parts'

# 2. –ü–∞–ø–∫–∞, –∫—É–¥–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
output_dir = 'translated_parts'

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ LM-Studio
API_URL = 'http://localhost:1234/v1/chat/completions'

# –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –º–æ–¥–µ–ª–µ–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é)
MODEL_NAME = 'saiga_nemo_12b'


# MODEL_NAME = 'towerbase-7b-v0.1'
# MODEL_NAME = 'wingpt-babel-2'
# MODEL_NAME = 'salamandrata-7b-instruct'

# -----------------

def get_optimized_prompt(model_name, text_to_translate):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏."""

    if model_name == 'saiga_nemo_12b':
        return {
            'messages': [
                {
                    "role": "system",
                    "content": """–í—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤. 
                    –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å, —Ç–æ–Ω –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.

                    –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:
                    - –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
                    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                    - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–¥–∏–æ–º—ã
                    - –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä—É—Å—Å–∫–∏–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç"""
                },
                {
                    'role': 'user',
                    'content': f"""–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:

–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: "{text_to_translate}"

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
                }
            ]
        }

    elif model_name == 'towerbase-7b-v0.1':
        return {
            'messages': [
                {
                    "role": "system",
                    "content": """You are a professional translation specialist trained to translate between multiple languages with high accuracy. Focus on producing natural, contextually appropriate translations while preserving the original meaning and style."""
                },
                {
                    'role': 'user',
                    'content': f"""Task: Translate the following text from English to Russian.

Context: General text translation
Source Language: English
Target Language: Russian

Text to translate: "{text_to_translate}"

Instructions:
- Provide an accurate and fluent Russian translation
- Maintain the original tone and style
- Ensure grammatical correctness in Russian
- Output only the translation"""
                }
            ]
        }

    elif model_name == 'wingpt-babel-2':
        return {
            'messages': [
                {
                    "role": "system",
                    "content": "Translate this to Russian Language"
                },
                {
                    'role': 'user',
                    'content': text_to_translate
                }
            ]
        }

    elif model_name == 'salamandrata-7b-instruct':
        return {
            'messages': [
                {
                    "role": "system",
                    "content": """You are a specialized translation model. Translate the given text accurately while preserving meaning, style, and cultural context. Focus on producing natural, high-quality translations."""
                },
                {
                    'role': 'user',
                    'content': f"""Translate from English to Russian:

Source text: {text_to_translate}

Provide a natural and accurate Russian translation."""
                }
            ]
        }

    else:
        # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        return {
            'messages': [
                {"role": "system", "content": "You are an assistant that translates text from English to Russian."},
                {'role': 'user', 'content': f"Translate the following English text to Russian: {text_to_translate}"}
            ]
        }


def translate_text(text_to_translate):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥."""
    if not isinstance(text_to_translate, str) or not text_to_translate.strip():
        return text_to_translate

    headers = {'Content-Type': 'application/json'}

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    prompt_data = get_optimized_prompt(MODEL_NAME, text_to_translate)

    payload = {
        'model': MODEL_NAME,
        'messages': prompt_data['messages'],
        'temperature': 0.1,
        'max_tokens': 1024
    }

    try:
        response = requests.post(API_URL, headers=headers, json=payload, timeout=60)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content'].strip()
    except requests.exceptions.RequestException as e:
        print(f"!! –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return text_to_translate  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    except (KeyError, IndexError):
        print("!! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
        return text_to_translate
    except Exception as e:
        print(f"!! –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return text_to_translate


def print_model_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º –ø—Ä–æ–º–ø—Ç–µ."""
    model_info = {
        'saiga_nemo_12b': "–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º",
        'towerbase-7b-v0.1': "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è 10 —è–∑—ã–∫–æ–≤",
        'wingpt-babel-2': "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è 55 —è–∑—ã–∫–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º",
        'salamandrata-7b-instruct': "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –ø–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è 35 —è–∑—ã–∫–æ–≤"
    }

    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    print(f"   –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model_info.get(MODEL_NAME, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å')}")
    print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ ---
try:
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
    print_model_info()

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: '{output_dir}'")

    files_to_process = [f for f in os.listdir(input_dir) if f.endswith('.csv')]
    if not files_to_process:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í –ø–∞–ø–∫–µ '{input_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ .csv –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–∫—Ä–∏–ø—Ç prepare_data.py")
        exit()

    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ '{input_dir}'...")

    total_translations = 0
    start_time = time.time()

    for file_idx, filename in enumerate(files_to_process, 1):
        file_path = os.path.join(input_dir, filename)
        print(f"\n--- üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_idx}/{len(files_to_process)}: {filename} ---")

        df = pd.read_csv(file_path)
        file_translations = 0

        for index, row in df.iterrows():
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å
            original_question = row['Question']
            translated_question = translate_text(original_question)
            df.at[index, 'Question'] = translated_question
            file_translations += 1

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
            original_answer = row['Answer']
            translated_answer = translate_text(original_answer)
            df.at[index, 'Answer'] = translated_answer
            file_translations += 1

            print(f"  ‚úÖ –°—Ç—Ä–æ–∫–∞ {index + 1}/{len(df)}: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ (Q+A)")
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API

        total_translations += file_translations

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_filename = os.path.join(output_dir, f"{os.path.splitext(filename)[0]}_translated.csv")
        df.to_csv(output_filename, index=False, encoding='utf-8')
        print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output_filename}")
        print(f"üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ: {file_translations} —Ç–µ–∫—Å—Ç–æ–≤")

    end_time = time.time()
    processing_time = end_time - start_time

    print(f"\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_process)}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_translations / processing_time:.2f} –ø–µ—Ä–µ–≤–æ–¥–æ–≤/—Å–µ–∫")
    print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: '{output_dir}'")

except FileNotFoundError:
    print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ '{input_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
except Exception as e:
    print(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

